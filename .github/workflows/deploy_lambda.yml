name: Deploy Lambda

on:
  push:
    branches:
      - main  # Executa o deploy quando há push na branch main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checando Repo
      uses: actions/checkout@v3

    - name: Set up do Node
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: NPM Install
      run: npm install 

    - name: Verificar AWS CLI
      run: aws --version

    - name: Zip Lambda getUser function
      run: zip -r getUser.zip getUser.js node_modules

    - name: Zip Lambda postUser function
      run: zip -r postUser.zip postUser.js node_modules

    - name: Configurar Credenciais AWS
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Criar API Gateway
      run: |
        API_ID=$(aws apigatewayv2 create-api \
          --name "apiGatewayLambda" \
          --protocol-type HTTP \
          --description "API Gateway para Lambda de validação e cadastro de usuário" \
          --query "ApiId" \
          --output text)
        echo "API_ID=$API_ID" >> $GITHUB_ENV

    - name: Criar Função Lambda getUser
      run: |
        aws lambda create-function \
          --function-name getUser \
          --runtime nodejs20.x \
          --handler getUser.handler \
          --zip-file fileb://getUser.zip \
          --timeout 10 \
          --memory-size 128 \
          --role arn:aws:iam::300254322294:role/LabRole

    - name: Criar Função Lambda postUser
      run: |
        aws lambda create-function \
          --function-name postUser \
          --runtime nodejs20.x \
          --handler postUser.handler \
          --zip-file fileb://postUser.zip \
          --timeout 10 \
          --memory-size 128 \
          --role arn:aws:iam::300254322294:role/LabRole
    
    - name: Configurar Variáveis de Ambiente da Lambda postUser
      run: |
        aws lambda update-function-configuration \
          --function-name postUser \
          --environment Variables="us-east-1_n8dcY8my5"

    - name: Criar Integração Lambda getUser no API Gateway
      run: |
        INTEGRATION_ID_GET=$(aws apigatewayv2 create-integration \
          --api-id ${{ env.API_ID }} \
          --integration-type AWS_PROXY \
          --integration-uri arn:aws:lambda:us-east-1:300254322294:function:getUser \
          --payload-format-version 2.0 \
          --query "IntegrationId" \
          --output text)
        echo "INTEGRATION_ID_GET=$INTEGRATION_ID_GET" >> $GITHUB_ENV

    - name: Criar Integração Lambda postUser no API Gateway
      run: |
        INTEGRATION_ID_POST=$(aws apigatewayv2 create-integration \
          --api-id ${{ env.API_ID }} \
          --integration-type AWS_PROXY \
          --integration-uri arn:aws:lambda:us-east-1:300254322294:function:postUser \
          --payload-format-version 2.0 \
          --query "IntegrationId" \
          --output text)
        echo "INTEGRATION_ID_POST=$INTEGRATION_ID_POST" >> $GITHUB_ENV

    - name: Criar Rota GET /getUser
      run: |
        aws apigatewayv2 create-route \
          --api-id ${{ env.API_ID }} \
          --route-key "GET /getUser" \
          --target integrations/${{ env.INTEGRATION_ID_GET }}

    - name: Criar Rota POST /postUser
      run: |
        aws apigatewayv2 create-route \
          --api-id ${{ env.API_ID }} \
          --route-key "POST /postUser" \
          --target integrations/${{ env.INTEGRATION_ID_POST }}

    - name: Criar Deploy da API
      run: |
        DEPLOYMENT_ID=$(aws apigatewayv2 create-deployment \
          --api-id ${{ env.API_ID }} \
          --query "DeploymentId" \
          --output text)
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        aws apigatewayv2 create-stage \
          --api-id ${{ env.API_ID }} \
          --stage-name "dev" \
          --deployment-id $DEPLOYMENT_ID

    - name: Dar Permissão ao Lambda getUser
      run: |
        aws lambda add-permission \
          --function-name getUser \
          --statement-id apigateway-access-get \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn arn:aws:execute-api:us-east-1:300254322294:${{ env.API_ID }}/*/*/getUser

    - name: Dar Permissão ao Lambda postUser
      run: |
        aws lambda add-permission \
          --function-name postUser \
          --statement-id apigateway-access-post \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn arn:aws:execute-api:us-east-1:300254322294:${{ env.API_ID }}/*/*/postUser
